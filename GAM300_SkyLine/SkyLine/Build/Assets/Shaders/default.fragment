#version 430 core
out vec4 FragColor;

in VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
} fs_in;

struct LightInfo {
 vec4 position;
 vec3 intensity;
};

uniform LightInfo Light;
uniform vec3 Kd; // Diffuse reflectivity
uniform vec3 Ka; // Ambient reflectivity
vec3 Ks = vec3(10.0f, 10.0f, 10.0f);

//uniform sampler2D texture;

void main()
{           
    vec3 color = vec3(0.1, 0.5, 0.1); //texture(floorTexture, fs_in.TexCoords).rgb;

    // ambient
    vec3 ambient = Ka * color;

    // diffuse
    vec3 lightDir = normalize(vec3(Light.position.xyz) - fs_in.FragPos);
    vec3 normal = normalize(fs_in.Normal);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * Kd;

    // specular
    vec3 viewDir = normalize(-fs_in.FragPos);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = 0.0;

    vec3 halfwayDir = normalize(lightDir + viewDir);  
    spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);

    vec3 specular = Ks * spec; // assuming bright white light color

	// Set color
    FragColor = vec4(ambient + diffuse + specular, 1.0);
}